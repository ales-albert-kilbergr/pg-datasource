/* eslint-disable @typescript-eslint/prefer-destructuring */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-magic-numbers */
import { TestScheduler } from 'rxjs/testing';
import { DatabaseError } from 'pg';
import {
  catchDatabaseError,
  catchDuplicateTableError,
  catchMissingPartitionError,
  catchUndefinedTableError,
  pickFirst,
  reduceToColumn,
} from './operators';
import { of, throwError } from 'rxjs';
import { QueryResult } from './query-result';
import { mock } from 'jest-mock-extended';
import type { QueryConfig } from '@kilbergr/pg-sql';

// https://medium.com/@bencabanes/marble-testing-observable-introduction-1f5ad39231c
describe('(Unit) Operators', () => {
  // eslint-disable-next-line @typescript-eslint/init-declarations
  let testScheduler: TestScheduler;

  describe('pickFirst', () => {
    beforeEach(() => {
      testScheduler = new TestScheduler((actual, expected) => {
        expect(actual).toEqual(expected);
      });
    });

    it('should pick the first value from an array of query result rows', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        const expectedMarbles = '(a|)';
        const input = [
          {
            first_name: 'John',
            last_name: 'Doe',
          },
          {
            first_name: 'Jane',
            last_name: 'Doe',
          },
        ];
        const expectedOutput = input[0];
        // Act
        const result$ = of(input).pipe(pickFirst());
        // Assert
        expectObservable(result$).toBe(expectedMarbles, { a: expectedOutput });
      });
    });

    it('should pick the first value from a query result', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        const expectedMarbles = '(a|)';
        const input = new QueryResult(mock<QueryConfig>());
        input.result = {
          command: 'SELECT',
          rowCount: 2,
          oid: 0,
          fields: [],
          rows: [
            {
              first_name: 'John',
              last_name: 'Doe',
            },
            {
              first_name: 'Jane',
              last_name: 'Doe',
            },
          ],
        };
        const expectedOutput = input.result.rows[0];
        // Act
        const result$ = of(input).pipe(pickFirst());
        // Assert
        expectObservable(result$).toBe(expectedMarbles, {
          a: expectedOutput,
        });
      });
    });

    it('should pass null if it arrives in the input', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        const expectedMarbles = '(a|)';
        const input = null;
        const expectedOutput = null;
        // Act
        const result$ = of(input).pipe(pickFirst());
        // Assert
        expectObservable(result$).toBe(expectedMarbles, {
          a: expectedOutput,
        });
      });
    });

    it('should pass undefined if it arrives in the input', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        const expectedMarbles = '(a|)';
        const input = undefined;
        const expectedOutput = undefined;
        // Act
        const result$ = of(input).pipe(pickFirst());
        // Assert
        expectObservable(result$).toBe(expectedMarbles, {
          a: expectedOutput,
        });
      });
    });
  });

  describe('reduceToColumn', () => {
    beforeEach(() => {
      testScheduler = new TestScheduler((actual, expected) => {
        expect(actual).toEqual(expected);
      });
    });

    it('should pick a selected column from a query result and return it as an array', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        const input = new QueryResult(mock<QueryConfig>());
        input.result = {
          command: 'SELECT',
          rowCount: 2,
          oid: 0,
          fields: [],
          rows: [
            {
              firstName: 'John',
              lastName: 'Doe',
            },
            {
              firstName: 'Jane',
              lastName: 'Doe',
            },
          ],
        };

        const expectedOutput = ['John', 'Jane'];

        // Act
        const result$ = of(input).pipe(reduceToColumn('firstName'));

        // Assert
        expectObservable(result$).toBe('(a|)', { a: expectedOutput });
      });
    });

    it('should return an empty array if the input is undefined', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        const input = undefined;
        const expectedOutput: string[] = [];

        // Act
        const result$ = of(input).pipe(reduceToColumn('firstName'));

        // Assert
        expectObservable(result$).toBe('(a|)', { a: expectedOutput });
      });
    });

    it('should pick the column from a query result rows', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        const input = [
          {
            firstName: 'John',
            lastName: 'Doe',
          },
          {
            firstName: 'Jane',
            lastName: 'Doe',
          },
        ];

        const expectedOutput = ['John', 'Jane'];

        // Act
        const result$ = of(input).pipe(reduceToColumn('firstName'));

        // Assert
        expectObservable(result$).toBe('(a|)', { a: expectedOutput });
      });
    });

    it('should apply the transformation operator on a column value', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        const input = [
          {
            firstName: 'John',
            lastName: 'Doe',
          },
          {
            firstName: 'Jane',
            lastName: 'Doe',
          },
        ];

        const expectedOutput = ['john', 'jane'];

        // Act
        const result$ = of(input).pipe(
          reduceToColumn('firstName', (value) => String(value).toLowerCase()),
        );

        // Assert
        expectObservable(result$).toBe('(a|)', { a: expectedOutput });
      });
    });

    it('should return an empty array if the column does not exist', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        const input = [
          {
            firstName: 'John',
            lastName: 'Doe',
          },
          {
            firstName: 'Jane',
            lastName: 'Doe',
          },
        ];

        const expectedOutput: string[] = [];

        // Act
        const result$ = of(input).pipe(reduceToColumn('middleName'));

        // Assert
        expectObservable(result$).toBe('(a|)', { a: expectedOutput });
      });
    });
  });

  describe('catchDatabaseError', () => {
    beforeEach(() => {
      testScheduler = new TestScheduler((actual, expected) => {
        expect(actual).toEqual(expected);
      });
    });

    it('should catch a DatabaseError with the specified code and return the result from catchFn', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will be caught and some result is
        // expected to be returned
        const expectedMarbles = '(a|)';
        const databaseErrorCode = '12345';

        const error = new DatabaseError('Random database error', 111, 'error');
        error.code = databaseErrorCode;
        const result = 'handled';

        // Act
        const result$ = throwError(() => error).pipe(
          catchDatabaseError(databaseErrorCode, () => result),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, { a: result });
      });
    });

    it('should not catch a DatabaseError with a different code', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will not be caught
        const expectedMarbles = '#';
        const databaseErrorCode = '12345';

        const error = new DatabaseError('Random database error', 111, 'error');
        error.code = '54321';

        // Act
        const result$ = throwError(() => error).pipe(
          catchDatabaseError(databaseErrorCode, () => 'handled'),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, null, error);
      });
    });

    it('should not catch an error that is not a DatabaseError', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will not be caught
        const expectedMarbles = '#';

        const error = new Error('Random error');

        // Act
        const result$ = throwError(() => error).pipe(
          catchDatabaseError('12345', () => 'handled'),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, null, error);
      });
    });

    it('should throw another error if the handler callback returns one', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will not be caught
        const expectedMarbles = '#';

        const databaseErrorCode = '12345';
        const error = new DatabaseError(
          'Random database error',
          111,
          'parseComplete',
        );
        error.code = databaseErrorCode;

        const handlerError = new Error('Handler error');

        // Act
        const result$ = throwError(() => error).pipe(
          catchDatabaseError(databaseErrorCode, () => handlerError),
        );

        // Assert
        expectObservable(result$).toBe(
          expectedMarbles,
          undefined,
          handlerError,
        );
      });
    });

    it('should rethrow an error throw by an error handler', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will not be caught
        const expectedMarbles = '#';

        const databaseErrorCode = '12345';
        const error = new DatabaseError('Random database error', 111, 'error');
        error.code = databaseErrorCode;

        const handlerError = new Error('Handler error');

        // Act
        const result$ = throwError(() => error).pipe(
          catchDatabaseError(databaseErrorCode, () => {
            throw handlerError;
          }),
        );

        // Assert
        expectObservable(result$).toBe(
          expectedMarbles,
          undefined,
          handlerError,
        );
      });
    });
  });

  describe('catchDuplicateTableError', () => {
    beforeEach(() => {
      testScheduler = new TestScheduler((actual, expected) => {
        expect(actual).toEqual(expected);
      });
    });

    it('should catch a duplicate table error and return the result from catchFn', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will be caught and some result is
        // expected to be returned
        const expectedMarbles = '(a|)';

        const error = new DatabaseError(
          'relation "my_test_table" already exists',
          123,
          'error',
        );
        error.code = '42P07';
        const result = 'handled';

        // Act
        const result$ = throwError(() => error).pipe(
          catchDuplicateTableError(() => result),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, { a: result });
      });
    });

    it('should not catch a duplicate table error with a different code', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will not be caught
        const expectedMarbles = '#';

        const error = new DatabaseError('my other error', 123, 'error');
        error.code = '54321';

        // Act
        const result$ = throwError(() => error).pipe(
          catchDuplicateTableError(() => 'handled'),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, null, error);
      });
    });

    it('should pass the table name from the error to the catchFn', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will be caught and some result is
        // expected to be returned
        const expectedMarbles = '(a|)';

        const tableName = 'my_test_table';
        const error = new DatabaseError(
          `relation "${tableName}" already exists`,
          123,
          'error',
        );
        error.code = '42P07';

        // Act
        const result$ = throwError(() => error).pipe(
          catchDuplicateTableError((name) => name),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, { a: tableName });
      });
    });

    it('should catch the duplicate table error with non matching message', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will be caught and some result is
        // expected to be returned
        const expectedMarbles = '(a|)';

        const tableName = 'my_test_table';
        const error = new DatabaseError(
          `relation "${tableName}" already exists but with a different message`,
          123,
          'error',
        );
        error.code = '42P07';

        // Act
        const result$ = throwError(() => error).pipe(
          catchDuplicateTableError(() => 'handled'),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, { a: 'handled' });
      });
    });
  });

  describe('catchUndefinedTableError', () => {
    beforeEach(() => {
      testScheduler = new TestScheduler((actual, expected) => {
        expect(actual).toEqual(expected);
      });
    });

    it('should catch an undefined table error and return the result from catchFn', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will be caught and some result is
        // expected to be returned
        const expectedMarbles = '(a|)';

        const error = new DatabaseError(
          'relation "my_test_table" does not exist',
          123,
          'error',
        );
        error.code = '42P01';
        const result = 'handled';

        // Act
        const result$ = throwError(() => error).pipe(
          catchUndefinedTableError(() => result),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, { a: result });
      });
    });

    it('should not catch an undefined table error with a different code', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will not be caught
        const expectedMarbles = '#';

        const error = new DatabaseError('my other error', 123, 'error');
        error.code = '54321';

        // Act
        const result$ = throwError(() => error).pipe(
          catchUndefinedTableError(() => 'handled'),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, null, error);
      });
    });

    it('should pass the table name from the error to the catchFn', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will be caught and some result is
        // expected to be returned
        const expectedMarbles = '(a|)';

        const tableName = 'my_test_table';
        const error = new DatabaseError(
          `relation "${tableName}" does not exist`,
          123,
          'error',
        );
        error.code = '42P01';

        // Act
        const result$ = throwError(() => error).pipe(
          catchUndefinedTableError((name) => name),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, { a: tableName });
      });
    });
  });

  describe('catchMissingPartitionError', () => {
    beforeEach(() => {
      testScheduler = new TestScheduler((actual, expected) => {
        expect(actual).toEqual(expected);
      });
    });

    it('should catch a missing partition error and return the result from catchFn', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will be caught and some result is
        // expected to be returned
        const expectedMarbles = '(a|)';

        const error = new DatabaseError(
          'Partition key of the failing row contains (aggregate_type) = (UxJobaAa).',
          123,
          'error',
        );
        error.code = '23514';
        const result = 'handled';

        // Act
        const result$ = throwError(() => error).pipe(
          catchMissingPartitionError(() => result),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, { a: result });
      });
    });

    it('should not catch a missing partition error with a different code', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will not be caught
        const expectedMarbles = '#';

        const error = new DatabaseError('my other error', 123, 'error');
        error.code = '54321';

        // Act
        const result$ = throwError(() => error).pipe(
          catchMissingPartitionError(() => 'handled'),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, null, error);
      });
    });

    it('should pass a key-value object describing the partition key and value to the catchFn', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will be caught and some result is
        // expected to be returned
        const expectedMarbles = '(a|)';

        const error = new DatabaseError(
          'Partition key of the failing row contains (aggregate_type) = (UxJobaAa).',
          123,
          'error',
        );
        error.code = '23514';

        const partitionKey = 'aggregate_type';
        const partitionValue = 'UxJobaAa';

        // Act
        const result$ = throwError(() => error).pipe(
          catchMissingPartitionError((partition) => partition),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, {
          a: { [partitionKey]: partitionValue },
        });
      });
    });

    it('should pass multiple partitions as key-value object to the catchFn', () => {
      testScheduler.run(({ expectObservable }) => {
        // Arrange
        // indicates that the error will be caught and some result is
        // expected to be returned
        const expectedMarbles = '(a|)';

        const error = new DatabaseError(
          'Partition key of the failing row contains (aggregate_type, store_id) = (UxJobaAa, 123).',
          123,
          'error',
        );
        error.code = '23514';

        const partitionKey1 = 'aggregate_type';
        const partitionValue1 = 'UxJobaAa';
        const partitionKey2 = 'store_id';
        const partitionValue2 = '123';

        // Act
        const result$ = throwError(() => error).pipe(
          catchMissingPartitionError((partition) => partition),
        );

        // Assert
        expectObservable(result$).toBe(expectedMarbles, {
          a: {
            [partitionKey1]: partitionValue1,
            [partitionKey2]: partitionValue2,
          },
        });
      });
    });
  });
});
